See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
Checkstyle:   FAILED (12 warnings)

Correctness:  34/43 tests passed
Memory:       50/53 tests passed
Timing:       75/110 tests passed

Aggregate score: 80.51%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.5K Apr 14 15:04 Deque.java
 612 Apr 14 15:04 Permutation.java
3.4K Apr 14 15:04 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M C NP_NULL_ON_SOME_PATH NP: Dereferences the variable 'oldfirst', but its value might be null on some execution branch.  Dereferenced at RandomizedQueue.java:[line 76]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'privateToString()' is never called.  At RandomizedQueue.java:[lines 56-61]
Warnings generated: 2

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Deque.java:9:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
Deque.java:44:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:76:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:81:14: 'while' is not followed by whitespace. [WhitespaceAfter]
Deque.java:129:19: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:135:19: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:137:19: 'if' is not followed by whitespace. [WhitespaceAfter]
RandomizedQueue.java:71:14: 'while' is not followed by whitespace. [WhitespaceAfter]
RandomizedQueue.java:110:19: 'if' is not followed by whitespace. [WhitespaceAfter]
RandomizedQueue.java:112:19: 'if' is not followed by whitespace. [WhitespaceAfter]
Permutation.java:18:19: '=' is not preceded with whitespace. [WhitespaceAround]
Permutation.java:18:20: '=' is not followed by whitespace. [WhitespaceAround]
Checkstyle ends with 12 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: Calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
    java.lang.NullPointerException

    Deque$Node.access$202(Deque.java:14)
    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:59)
    TestDeque.test1(TestDeque.java:152)
    TestDeque.main(TestDeque.java:739)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addFirst(1)
         deque.addLast(2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
    java.lang.NullPointerException

    Deque$Node.access$202(Deque.java:14)
    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:59)
    TestDeque.test1(TestDeque.java:155)
    TestDeque.main(TestDeque.java:739)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addLast(1)
==> FAILED

Test 2: Calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: Calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test3(TestDeque.java:181)
    TestDeque.main(TestDeque.java:741)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addFirst(1)
         deque.addFirst(2)
         deque.addFirst(3)
         deque.addFirst(4)
         deque.addFirst(5)
         deque.removeLast()
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test3(TestDeque.java:182)
    TestDeque.main(TestDeque.java:741)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addFirst(1)
         deque.addFirst(2)
         deque.isEmpty()
         deque.addFirst(4)
         deque.addFirst(5)
         deque.removeLast()
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test3(TestDeque.java:183)
    TestDeque.main(TestDeque.java:741)

  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test3(TestDeque.java:184)
    TestDeque.main(TestDeque.java:741)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addFirst(1)
         deque.removeLast()
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test3(TestDeque.java:185)
    TestDeque.main(TestDeque.java:741)

    - sequence of dequeue operations was:
         deque.isEmpty()
         deque.isEmpty()
         deque.isEmpty()
         deque.addFirst(3)
         deque.isEmpty()
         deque.removeLast()
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test3(TestDeque.java:186)
    TestDeque.main(TestDeque.java:741)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.removeLast()
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test3(TestDeque.java:187)
    TestDeque.main(TestDeque.java:741)

    - sequence of dequeue operations was:
         deque.isEmpty()
         deque.isEmpty()
         deque.addFirst(2)
         deque.addFirst(3)
         deque.addFirst(4)
         deque.removeLast()
==> FAILED

Test 4: Calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
    - student   isEmpty() returned true
    - reference isEmpty() returned false

  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 13 of 1000
    - student   removeLast() returned 11
    - reference removeLast() returned 10

  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    java.util.NoSuchElementException

    Deque.removeLast(Deque.java:70)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test4(TestDeque.java:201)
    TestDeque.main(TestDeque.java:742)

    - sequence of dequeue operations was:
         deque.isEmpty()
         deque.isEmpty()
         deque.addLast(2)
         deque.isEmpty()
         deque.removeLast()      ==> 2
         deque.isEmpty()
         deque.addLast(6)
         deque.addLast(7)
         deque.removeLast()      ==> 7
         deque.addLast(9)
         deque.removeLast()      ==> 9
         deque.removeLast()
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 6 of 500
    - student   removeLast() returned 4
    - reference removeLast() returned 2
    - sequence of dequeue operations was:
         deque.addLast(0)
         deque.removeLast()      ==> 0
         deque.addLast(2)
         deque.isEmpty()
         deque.addLast(4)
         deque.removeLast()      ==> 4
         deque.removeLast()      ==> 4

  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned true
    - reference isEmpty() returned false
    - sequence of dequeue operations was:
         deque.isEmpty()
         deque.isEmpty()
         deque.addLast(2)
         deque.removeLast()      ==> 2
         deque.isEmpty()
         deque.addLast(5)
         deque.addLast(6)
         deque.removeLast()      ==> 6
         deque.addLast(8)
         deque.removeLast()      ==> 8
         deque.isEmpty()

==> FAILED

Test 5: Calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size().
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    java.lang.NullPointerException

    Deque$Node.access$202(Deque.java:14)
    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:59)
    TestDeque.test6(TestDeque.java:231)
    TestDeque.main(TestDeque.java:744)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addLast(1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    java.lang.NullPointerException

    Deque$Node.access$202(Deque.java:14)
    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:59)
    TestDeque.test6(TestDeque.java:232)
    TestDeque.main(TestDeque.java:744)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addLast(1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 35 of 1000
    - student   removeLast() returned 32
    - reference removeLast() returned 25

  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test6(TestDeque.java:235)
    TestDeque.main(TestDeque.java:744)

    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.addFirst(1)
         deque.size()
         deque.size()
         deque.removeLast()
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - student   size() returned 1
    - reference size() returned 0

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - student   size() returned 2
    - reference size() returned 1
    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.isEmpty()
         deque.removeFirst()     ==> 0
         deque.isEmpty()
         deque.isEmpty()
         deque.addLast(5)
         deque.removeLast()      ==> 5
         deque.addFirst(7)
         deque.size()

==> FAILED

Test 7: Removing from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
==> passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
    java.lang.NullPointerException

    Deque$Node.access$100(Deque.java:14)
    Deque.removeLast(Deque.java:71)
    TestDeque.test10(TestDeque.java:406)
    TestDeque.main(TestDeque.java:748)

    - sequence of dequeue operations was:
          deque.addFirst(1)
          deque.removeLast()
==> FAILED

Test 11: Create two nested iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 12: Create two parallel iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 13: Create Deque objects of different parameterized types
==> passed

Test 14: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==> passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: Check iterator() when Deque is empty
==> passed


Total: 11/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
==> passed

Test 7: check that iterator() returns correct items after a sequence of
        enqueue() operations
==> passed

Test 8: check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    - two inner iterators return the same sequence of items;
    - they should return the same set of items but in a
      different order
  * n = 1000
    - two inner iterators return the same sequence of items;
    - they should return the same set of items but in a
      different order
==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - two inner iterators return the same sequence of values;
    - they should return the same set of values but in a
      different order
  * n = 1000
    - two inner iterators return the same sequence of values;
    - they should return the same set of values but in a
      different order
==> FAILED

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
               AB     12000    6000.0      16635.53
               BA         0    6000.0          0.00
        -------------------------------------------
                      12000   12000.0      16635.53

    G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC     12000    2000.0      43002.23
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA         0    2000.0          0.00
        -------------------------------------------
                      12000   12000.0      43002.23

    G-statistic = 43002.23 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
             ABCD     12000     500.0      76273.29
             ABDC         0     500.0          0.00
             ACBD         0     500.0          0.00
             ACDB         0     500.0          0.00
             ADBC         0     500.0          0.00
             ADCB         0     500.0          0.00
             BACD         0     500.0          0.00
             BADC         0     500.0          0.00
             BCAD         0     500.0          0.00
             BCDA         0     500.0          0.00
             BDAC         0     500.0          0.00
             BDCA         0     500.0          0.00
             CABD         0     500.0          0.00
             CADB         0     500.0          0.00
             CBAD         0     500.0          0.00
             CBDA         0     500.0          0.00
             CDAB         0     500.0          0.00
             CDBA         0     500.0          0.00
             DABC         0     500.0          0.00
             DACB         0     500.0          0.00
             DBAC         0     500.0          0.00
             DBCA         0     500.0          0.00
             DCAB         0     500.0          0.00
             DCBA         0     500.0          0.00
        -------------------------------------------
                      12000   12000.0      76273.29

    G-statistic = 76273.29 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

==> FAILED

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
               AB     12000    6000.0      16635.53
               BA         0    6000.0          0.00
        -------------------------------------------
                      12000   12000.0      16635.53

    G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC     12000    2000.0      43002.23
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA         0    2000.0          0.00
        -------------------------------------------
                      12000   12000.0      43002.23

    G-statistic = 43002.23 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
             ABCD     12000     500.0      76273.29
             ABDC         0     500.0          0.00
             ACBD         0     500.0          0.00
             ACDB         0     500.0          0.00
             ADBC         0     500.0          0.00
             ADCB         0     500.0          0.00
             BACD         0     500.0          0.00
             BADC         0     500.0          0.00
             BCAD         0     500.0          0.00
             BCDA         0     500.0          0.00
             BDAC         0     500.0          0.00
             BDCA         0     500.0          0.00
             CABD         0     500.0          0.00
             CADB         0     500.0          0.00
             CBAD         0     500.0          0.00
             CBDA         0     500.0          0.00
             CDAB         0     500.0          0.00
             CDBA         0     500.0          0.00
             DABC         0     500.0          0.00
             DACB         0     500.0          0.00
             DBAC         0     500.0          0.00
             DBCA         0     500.0          0.00
             DCAB         0     500.0          0.00
             DCBA         0     500.0          0.00
        -------------------------------------------
                      12000   12000.0      76273.29

    G-statistic = 76273.29 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

==> FAILED

Test 16: check that NullPointerException is thrown when inserting null items
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 18: check iterator() when RandomizedQueue is empty
==> passed


Total: 14/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  I
  F
  E

  % java Permutation 3 < distinct.txt
  F
  A
  E

  % java Permutation 8 < duplicates.txt
  CC
  BB
  CC
  BB
  BB
  AA
  BB
  BB

==> passed

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  it
  the
  wisdom
  foolishness
  best
  of
  the
  was

  % java Permutation 0 < distinct.txt
  [no output]

==> passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==> passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==> passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==> passed

Total: 9/9 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is >=k and <= n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==> FAILED

Total: 2/2 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          296
=> passed       64         2088
=> passed      256         8232
=> passed     1024        32808
=> passed     4096       131112
==> 5/5 tests passed

Memory: 32.00 n + 40.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,


...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
